import os
import subprocess
import requests
import sys
import colorama
from colorama import Fore, Style
from dotenv import load_dotenv
import openai

# Function to get all video files in a given directory
def get_video_files(directory):
    video_files = []
    for filename in os.listdir(directory):
        if filename.endswith(".mp4"):
            video_files.append(os.path.join(directory, filename))
    return video_files

# Function to run vhisperx on a given video file
def run_vhisperx(video_file):
    print(video_file)
    subprocess.run(["sh", "vhisperx", "--vid", video_file])

# Function to read the output file generated by vhisperx
def read_output_file(directory, video_name):
    output_file_path = os.path.join(directory, video_name, "output_file.txt")
    with open(output_file_path, "r") as file:
        return file.read()

# Function to send text to an API and get a concise name as a response
def send_to_api(text, client, model="gpt-4o-mini"):
    response = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": f"""Pick a concise name in english for the following transcription of a video.
            The transcription may have various typos in it and yet you are expected to pick a cocise name for the video.
            BECAREFUL where this name is for a file name and has to be in english. ONLY SEND the FILE NAME, WITHOUT special chars like _ or $ etc : {text}"""},
        ],
        max_tokens=50  # Adjust the max_tokens as needed
    )
    return response.choices[0].message.content.strip()

# Function to rename a video file and its corresponding directory to a new name
def rename_video(video_file, new_name):
    directory = os.path.dirname(video_file)
    video_name = os.path.splitext(os.path.basename(video_file))[0]
    
    # Rename the video file
    new_video_file = os.path.join(directory, new_name + ".mp4")
    os.rename(video_file, new_video_file)
    
    # Rename the directory containing the output_file.txt
    old_directory = os.path.join(directory, video_name)
    new_directory = os.path.join(directory, new_name)
    os.rename(old_directory, new_directory)
    
    return new_video_file

# Function to log a task to a log file
def log_task(log_file, task):
    with open(log_file, "a") as file:
        file.write(task + "\n")

# Main function to process video files in a directory
def main():
    load_dotenv()

    api_key = os.environ['API_KEY']
    base_url = os.getenv('BASE_URL', 'https://api.together.xyz/v1')
    model = os.getenv('MODEL', 'meta-llama/Llama-3.3-70B-Instruct-Turbo')

    client = openai.OpenAI(api_key=api_key, base_url=base_url)
    colorama.init(autoreset=True)
    if len(sys.argv) != 3 or sys.argv[1] != "-d":
        print(Fore.RED + "Usage: python script.py -d <directory>")
        sys.exit(1)

    directory = sys.argv[2]
    video_files = get_video_files(directory)
    log_file = "1video-titler.txt"

    if not video_files:
        print(Fore.YELLOW + "No video files found in the directory.")
        log_task(log_file, "No video files found in the directory.")
        sys.exit(0)

    for video_file in video_files:
        video_name = os.path.splitext(os.path.basename(video_file))[0]
        print(Fore.CYAN + f"Processing video: {video_name}")

        output_file_path = os.path.join(directory, video_name, "output_file.txt")
        if not os.path.exists(output_file_path):
            run_vhisperx(video_file)
            print(Fore.GREEN + f"vhisperx completed for {video_name}")
        else:
            print(Fore.GREEN + f"vhisperx output_file.txt found for {video_name}")

        output_text = read_output_file(directory, video_name)
        print(Fore.GREEN + f"Output file read for {video_name}")

        concise_name = send_to_api(output_text, client, model)
        print(Fore.GREEN + f"Concise name received from API for {video_name}: {concise_name}")

        new_video_file = rename_video(video_file, concise_name)
        print(Fore.GREEN + f"Video and directory renamed to: {new_video_file}")

        log_task(log_file, f"Processed {video_name} and renamed to {concise_name}")

    print(Fore.MAGENTA + "All tasks completed. Check 1video-titler.txt for the log.")
if __name__ == "__main__":
    main()

